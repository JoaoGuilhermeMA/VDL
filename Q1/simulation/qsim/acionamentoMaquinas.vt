// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/13/2024 09:24:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    acionamentoMaquinas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module acionamentoMaquinas_vlg_sample_tst(
	a,
	b,
	c,
	d,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module acionamentoMaquinas_vlg_check_tst (
	m1,
	m2,
	m3,
	m4,
	sampler_rx
);
input  m1;
input  m2;
input  m3;
input  m4;
input sampler_rx;

reg  m1_expected;
reg  m2_expected;
reg  m3_expected;
reg  m4_expected;

reg  m1_prev;
reg  m2_prev;
reg  m3_prev;
reg  m4_prev;

reg  m1_expected_prev;
reg  m2_expected_prev;
reg  m3_expected_prev;
reg  m4_expected_prev;

reg  last_m1_exp;
reg  last_m2_exp;
reg  last_m3_exp;
reg  last_m4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	m1_prev = m1;
	m2_prev = m2;
	m3_prev = m3;
	m4_prev = m4;
end

// update expected /o prevs

always @(trigger)
begin
	m1_expected_prev = m1_expected;
	m2_expected_prev = m2_expected;
	m3_expected_prev = m3_expected;
	m4_expected_prev = m4_expected;
end



// expected m1
initial
begin
	m1_expected = 1'bX;
end 

// expected m2
initial
begin
	m2_expected = 1'bX;
end 

// expected m3
initial
begin
	m3_expected = 1'bX;
end 

// expected m4
initial
begin
	m4_expected = 1'bX;
end 
// generate trigger
always @(m1_expected or m1 or m2_expected or m2 or m3_expected or m3 or m4_expected or m4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected m1 = %b | expected m2 = %b | expected m3 = %b | expected m4 = %b | ",m1_expected_prev,m2_expected_prev,m3_expected_prev,m4_expected_prev);
	$display("| real m1 = %b | real m2 = %b | real m3 = %b | real m4 = %b | ",m1_prev,m2_prev,m3_prev,m4_prev);
`endif
	if (
		( m1_expected_prev !== 1'bx ) && ( m1_prev !== m1_expected_prev )
		&& ((m1_expected_prev !== last_m1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m1_expected_prev);
		$display ("     Real value = %b", m1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_m1_exp = m1_expected_prev;
	end
	if (
		( m2_expected_prev !== 1'bx ) && ( m2_prev !== m2_expected_prev )
		&& ((m2_expected_prev !== last_m2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m2_expected_prev);
		$display ("     Real value = %b", m2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_m2_exp = m2_expected_prev;
	end
	if (
		( m3_expected_prev !== 1'bx ) && ( m3_prev !== m3_expected_prev )
		&& ((m3_expected_prev !== last_m3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m3_expected_prev);
		$display ("     Real value = %b", m3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_m3_exp = m3_expected_prev;
	end
	if (
		( m4_expected_prev !== 1'bx ) && ( m4_prev !== m4_expected_prev )
		&& ((m4_expected_prev !== last_m4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port m4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", m4_expected_prev);
		$display ("     Real value = %b", m4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_m4_exp = m4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module acionamentoMaquinas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
// wires                                               
wire m1;
wire m2;
wire m3;
wire m4;

wire sampler;                             

// assign statements (if any)                          
acionamentoMaquinas i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.m4(m4)
);

// a
always
begin
	a = 1'b0;
	a = #20000 1'b1;
	#20000;
end 

// b
always
begin
	b = 1'b0;
	b = #10000 1'b1;
	#10000;
end 

// c
always
begin
	c = 1'b0;
	c = #5000 1'b1;
	#5000;
end 

// d
always
begin
	d = 1'b0;
	d = #2500 1'b1;
	#2500;
end 

acionamentoMaquinas_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.sampler_tx(sampler)
);

acionamentoMaquinas_vlg_check_tst tb_out(
	.m1(m1),
	.m2(m2),
	.m3(m3),
	.m4(m4),
	.sampler_rx(sampler)
);
endmodule

